//////////////////////////////////////////
///////// 1 Area of interest //////////////
/////////////////////////////////////////

var g3 = ee.Geometry.Polygon(
    [[[8.794038754274526,62.6094577679195],
      [8.794038754274526,62.686435781000256],
      [8.559549313356557,62.686435781000256],
      [8.559549313356557,62.6094577679195]]]);
      
Map.addLayer(g3,
            {'color': 'black'},
            'Geometry [black]: polygon', false);


Map.centerObject(g3);
Map.setZoom(13);

///////////////////////////////////////////////
//// 2 making an rgb image of study area ///
//////////////////////////////////////////////

var visrgb = {
  bands:['B4','B3','B2'],
  min: 0,
  max: 3000,
  gamma: 1,
};

var test = ee.ImageCollection("COPERNICUS/S2_SR")
  .filterBounds(g3).select(['B2','B3','B4','B5'])
  .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE',30)); //FILTER CLOUD COVER
  
var test_before = test.filter(ee.Filter.date('2022-05-01', '2022-08-01')) //FILTER DATE
  .median()
  .clip(g3);
  
Map.addLayer(test_before.select('B3','B2','B4'), visrgb,'test1', false);

var test_after = test.filter(ee.Filter.date('2022-06-27', '2022-06-30'))
.mosaic(); 
  
Map.addLayer(test_after.clip(g3), visrgb, 'during flood rgb', false);

//////////////////////////////////////////////
// 3_NDWI_Normalized_Difference_Water_Index //
//////////////////////////////////////////////

var optical = ee.ImageCollection("COPERNICUS/S2_SR")
  .filterBounds(g3);
  
var optical_before = optical.filter(ee.Filter.date('2022-04-25', '2022-07-25'))//FILTER DATE
  .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE',30))
  .filterBounds(g3)
  .mean()
  .clip(g3);

var optical_after = optical.filter(ee.Filter.date('2022-06-27', '2022-06-30'))
 .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE',30))
  .filterBounds(g3)
  .mean()
  .clip(g3);

var optical_1before = optical.filter(ee.Filter.date('2022-05-01','2022-08-01'))
        .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE',30)); 

var optical_1after = optical.filter(ee.Filter.date('2022-06-27', '2022-06-30'))
        .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE',30));
  
//CALCULATION OF NDWI WITH SENTINEL 2: (BAND3-BAND8)/(BAND3+BAND8) = GREEN-NIR / GREEN+NIR
//Sentinel 2, level 2A data

var green_after = optical_after.select('B3');
var nir_after = optical_after.select('B8');
var NDWI_after = green_after.subtract(nir_after).divide(green_after.add(nir_after)).rename('NDWI_after');

var green_before = optical_before.select('B3');
var nir_before = optical_before.select('B8');
var NDWI_before = green_before.subtract(nir_before).divide(green_before.add(nir_before)).rename('NDWI_before');

var orbits_after = optical_1after.aggregate_array('SENSING_ORBIT_NUMBER').distinct().sort();
var directions_after = optical_1after.aggregate_array('SENSING_ORBIT_DIRECTION').distinct().sort();

print('Orbit Numbers:', orbits_after);
print('Orbit Directions:', directions_after);

// Create a palette colour scheme for NDWI
var ndwiParams = {
  min: -1, max: 1, 
  palette: ['FF0000', 'FFA500', 'FFFF00', 'ADD8E6','0ba4d6','00008B']
};
Map.addLayer(NDWI_after, ndwiParams, 'NDWI after', false);
Map.addLayer(NDWI_before, ndwiParams, 'NDWI before', false);


// figure out date for aquired NDWI after image
var dates_optical_after = optical_1after.map(function(image) {
      return ee.Feature(null, {'date': image.date().format('YYYY-MM-dd')})
    })
    .distinct('date')
    .aggregate_array('date');
    
print(dates_optical_after,'Dates S2 after');

var dates_optical_before = optical_1before.map(function(image) {
      return ee.Feature(null, {'date': image.date().format('YYYY-MM-dd')})
    })
    .distinct('date')
    .aggregate_array('date');
    
print(dates_optical_before,'Dates S2 before');

//Making a flood treshold for ndwi
var floodNDWI = NDWI_before.lt(0).and(NDWI_after.gt(0));
var flood_maskNDWI = floodNDWI.updateMask(floodNDWI.eq(1));

var classNDWI = flood_maskNDWI.reduce('sum').toInt();
//print(classNDWI, 'ClassNDWI');
Map.addLayer(classNDWI.clip(g3), ndwiParams, 'Classified NDWI');

Map.addLayer(flood_maskNDWI, {palette:['Red']}, 'NDWI flood mask', false);

////////////////////////////////////////////////////
//  4_S1 imagery and_ S1 automatic flood detection //
////////////////////////////////////////////////////

//create a before and after image of the flooded areas in Sunndal
var collection = ee.ImageCollection('COPERNICUS/S1_GRD')
        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
        .filter(ee.Filter.eq('instrumentMode', 'IW'))
        .filter(ee.Filter.eq('resolution','H'))
        .filter(ee.Filter.or(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'),ee.Filter.eq('orbitProperties_pass', 'ASCENDING')))
        .filter(ee.Filter.or(ee.Filter.eq('relativeOrbitNumber_start', 44),ee.Filter.eq('relativeOrbitNumber_stop',44)));
       
       
var before = collection.filter(ee.Filter.date('2022-04-25', '2022-07-25')).filterBounds(g3);
var after = collection.filter(ee.Filter.date('2022-06-27', '2022-07-01')).filterBounds(g3);

// figure out date for aquired S1 after image

var date_S1after = after.map(function(image) {
      return ee.Feature(null, {'date': image.date().format('YYYY-MM-dd')})
    })
    .distinct('date')
    .aggregate_array('date');
    
print(date_S1after,'Dates S1 after');

var date_S1before = before.map(function(image) {
      return ee.Feature(null, {'date': image.date().format('YYYY-MM-dd')})
    })
    .distinct('date')
    .aggregate_array('date');
    
print(date_S1before,'Dates S1 before');

// figure out relative orbit number start for aquired S1 after image
var OrbitStart_S1 = after.aggregate_array("relativeOrbitNumber_start");
// print(OrbitStart_S1,'S1_beforer relative orbit number stop');

// figure out relative orbit number stop for aquired S1 after image
var OrbitStop_S1 = after.aggregate_array("relativeOrbitNumber_stop");
// print(OrbitStop_S1,'S1_after relative orbit number stop');

//Select VH and VV for the "before flood" and "after flood" images
var before_image_VH = before.select('VH').mean().clip(g3);
var after_image_VH = after.select('VH').mean().clip(g3);

var before_image_VV = before.select('VV').mean().clip(g3);
var after_image_VV = after.select('VV').mean().clip(g3);


// We try now to fix the salt and pepper noise with a 
//function that shows salt and pepper as it was before and with a smoother after image
var before_filtered_VH = ee.Image(toDB(RefinedLee(toNatural(before_image_VH))))
var after_filtered_VH = ee.Image(toDB(RefinedLee(toNatural(after_image_VH))))

var before_filtered_VV = ee.Image(toDB(RefinedLee(toNatural(before_image_VV))))
var after_filtered_VV = ee.Image(toDB(RefinedLee(toNatural(after_image_VV))))

// Create thresholds for "flooded" areas
var flood_VH = before_filtered_VH.gt(-23).and(after_filtered_VH.lt(-23));
var flood_mask_VH = flood_VH.updateMask(flood_VH.eq(1));

var flood_VV = before_filtered_VV.gt(-15).and(after_filtered_VV.lt(-15));
var flood_mask_VV = flood_VV.updateMask(flood_VV.eq(1));


//showing filtered VH and VV images before and after flood
Map.addLayer(before_filtered_VH,{min: -25,max: 0}, 'before_filtered VH', false)
Map.addLayer(after_filtered_VH,{min: -25,max: 0}, 'after_filtered VH')

Map.addLayer(before_filtered_VV,{min: -25,max: 0}, 'before_filtered VV', false)
Map.addLayer(after_filtered_VV,{min: -25,max: 0}, 'after_filtered VV')


/////////////////////////////////////
// 5 Speckle Filtering Functions by Guido Lemoine //
/////////////////////////////////////
//https://github.com/senbox-org/s1tbx/blob/master/s1tbx-op-sar-processing/src/main/java/org/esa/s1tbx/sar/gpf/filtering/SpeckleFilters/RefinedLee.java

// Function to convert from and to dB 
function toNatural(img) {
  return ee.Image(10.0).pow(img.select(0).divide(10.0));
}

function toDB(img) {
  return ee.Image(img).log10().multiply(10.0);
}

function RefinedLee(img) {
  // img must be in natural units, i.e. not in dB!
  // Set up 3x3 kernels 
  var weights3 = ee.List.repeat(ee.List.repeat(1,3),3);
  var kernel3 = ee.Kernel.fixed(3,3, weights3, 1, 1, false);

  var mean3 = img.reduceNeighborhood(ee.Reducer.mean(), kernel3);
  var variance3 = img.reduceNeighborhood(ee.Reducer.variance(), kernel3);

  // Use a sample of the 3x3 windows inside a 7x7 windows to determine gradients and directions
  var sample_weights = ee.List([[0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0], [0,1,0,1,0,1,0], [0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0]]);

  var sample_kernel = ee.Kernel.fixed(7,7, sample_weights, 3,3, false);

  // Calculate mean and variance for the sampled windows and store as 9 bands
  var sample_mean = mean3.neighborhoodToBands(sample_kernel); 
  var sample_var = variance3.neighborhoodToBands(sample_kernel);

  // Determine the 4 gradients for the sampled windows
  var gradients = sample_mean.select(1).subtract(sample_mean.select(7)).abs();
  gradients = gradients.addBands(sample_mean.select(6).subtract(sample_mean.select(2)).abs());
  gradients = gradients.addBands(sample_mean.select(3).subtract(sample_mean.select(5)).abs());
  gradients = gradients.addBands(sample_mean.select(0).subtract(sample_mean.select(8)).abs());

  // And find the maximum gradient amongst gradient bands
  var max_gradient = gradients.reduce(ee.Reducer.max());

  // Create a mask for band pixels that are the maximum gradient
  var gradmask = gradients.eq(max_gradient);

  // duplicate gradmask bands: each gradient represents 2 directions
  gradmask = gradmask.addBands(gradmask);

  // Determine the 8 directions
  var directions = sample_mean.select(1).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(7))).multiply(1);
  directions = directions.addBands(sample_mean.select(6).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(2))).multiply(2));
  directions = directions.addBands(sample_mean.select(3).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(5))).multiply(3));
  directions = directions.addBands(sample_mean.select(0).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(8))).multiply(4));
  // The next 4 are the not() of the previous 4
  directions = directions.addBands(directions.select(0).not().multiply(5));
  directions = directions.addBands(directions.select(1).not().multiply(6));
  directions = directions.addBands(directions.select(2).not().multiply(7));
  directions = directions.addBands(directions.select(3).not().multiply(8));

  // Mask all values that are not 1-8
  directions = directions.updateMask(gradmask);

  // "collapse" the stack into a singe band image (due to masking, each pixel has just one value (1-8) in it's directional band, and is otherwise masked)
  directions = directions.reduce(ee.Reducer.sum());  

  //var pal = ['ffffff','ff0000','ffff00', '00ff00', '00ffff', '0000ff', 'ff00ff', '000000'];
  //Map.addLayer(directions.reduce(ee.Reducer.sum()), {min:1, max:8, palette: pal}, 'Directions', false);

  var sample_stats = sample_var.divide(sample_mean.multiply(sample_mean));

  // Calculate localNoiseVariance
  var sigmaV = sample_stats.toArray().arraySort().arraySlice(0,0,5).arrayReduce(ee.Reducer.mean(), [0]);

  // Set up the 7*7 kernels for directional statistics
  var rect_weights = ee.List.repeat(ee.List.repeat(0,7),3).cat(ee.List.repeat(ee.List.repeat(1,7),4));

  var diag_weights = ee.List([[1,0,0,0,0,0,0], [1,1,0,0,0,0,0], [1,1,1,0,0,0,0], 
    [1,1,1,1,0,0,0], [1,1,1,1,1,0,0], [1,1,1,1,1,1,0], [1,1,1,1,1,1,1]]);

  var rect_kernel = ee.Kernel.fixed(7,7, rect_weights, 3, 3, false);
  var diag_kernel = ee.Kernel.fixed(7,7, diag_weights, 3, 3, false);

  // Create stacks for mean and variance using the original kernels. Mask with relevant direction.
  var dir_mean = img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel).updateMask(directions.eq(1));
  var dir_var = img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel).updateMask(directions.eq(1));

  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel).updateMask(directions.eq(2)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel).updateMask(directions.eq(2)));

  // and add the bands for rotated kernels
  for (var i=1; i<4; i++) {
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
  }

  // "collapse" the stack into a single band image (due to masking, each pixel has just one value in it's directional band, and is otherwise masked)
  dir_mean = dir_mean.reduce(ee.Reducer.sum());
  dir_var = dir_var.reduce(ee.Reducer.sum());

  // A finally generate the filtered value
  var varX = dir_var.subtract(dir_mean.multiply(dir_mean).multiply(sigmaV)).divide(sigmaV.add(1.0));

  var b = varX.divide(dir_var);

  var result = dir_mean.add(b.multiply(img.subtract(dir_mean)));
  return(result.arrayFlatten([['sum']]));
}


/////////////////////////////////////////
// 6 Pixel, slope and elevation masking //
//////////////////////////////////////////

// Removing non-connected pixels, connected pixels will change based on zoom

var connected_pixels = 8;
var connections_VH = flood_mask_VH.connectedPixelCount(25);
var connections_VV = flood_mask_VV.connectedPixelCount(25);
var separated_areas_VH = connections_VH.lt(connected_pixels);
var separated_areas_VV = connections_VV.lt(connected_pixels);
var separated_areas_mask_VH = separated_areas_VH.not();
var separated_areas_mask_VV = separated_areas_VV.not();
Map.addLayer(separated_areas_VH.selfMask(), {min:0, max:1, palette: ['yellow']}, 'Disconnected Areas VH', false);
Map.addLayer(separated_areas_VV.selfMask(), {min:0, max:1, palette: ['yellow']}, 'Disconnected Areas VV', false);

var flood_mask_VH = flood_mask_VH.updateMask(separated_areas_mask_VH);
var flood_mask_VV = flood_mask_VV.updateMask(separated_areas_mask_VV);

//GET A PALETTE
var palettes = require('users/gena/packages:palettes');


//HERE WE APPLY A DEM TO DETECT AREAS THAT AREAS THAT HAVE A SLOPE DIP ABOVE 5 DEGREE'S,
//THEN WE CAN MASK THESE AREAS AND ADD IT TO THE SLOPEMAPPING 
var jax = ee.ImageCollection('JAXA/ALOS/AW3D30/V3_2');
var dataset = jax.select('DSM');
var snowvalue = jax.select('MSK');
var snow = snowvalue.filterBounds(g3);
var snow2 = snowvalue.mosaic().clip(g3);
var elevation = dataset.filterBounds(g3);
var elevation2 = dataset.mosaic().clip(g3);
var elevationVis = {
  min: 0,
  max: 2000,
  palette: ['black', 'white']
};
Map.addLayer(elevation2, elevationVis, 'Elevation', false);


// Reproject an image mosaic using a projection from one of the image tiles,
// rather than using the default projection returned by .mosaic().
var proj = elevation.first().select(0).projection();
var slopeReprojected = ee.Terrain.slope(elevation.mosaic()
                             .setDefaultProjection(proj));
                             
var highreproj = elevation.mosaic().setDefaultProjection(proj);

var slopeClip = slopeReprojected.clip(g3);

var slopepalette2 = {
  palette: ['#65ff64','#a9ff76','#f4ff5d','#ffdd5b','#ffb24f','#ff913f','#e70000'],
  min: 0,
  max: 90
};

Map.addLayer(slopeClip, slopepalette2, 'Slope', false);

//mask out areas with more than 5 percent slope and mask out elevation over a certain limit
var elevationtreshold = 60;
var slopetreshold = 5;
var steepareas = slopeReprojected.gt(slopetreshold);
var high = highreproj.gt(elevationtreshold);
var highmask = high.not();
var slopemask = steepareas.not();
var slopehigh = slopeReprojected.gt(slopetreshold).and(high);
var slopa = slopehigh.not();
Map.addLayer(high.clip(g3).selfMask(), {min:0, max:1, palette: ['green']}, 'High Areas', false);
Map.addLayer(steepareas.clip(g3).selfMask(), {min:0, max:1, palette: ['cyan']}, 'Steep Areas', false);
Map.addLayer(slopehigh.clip(g3).selfMask(), {min:0, max:1, palette: ['orange']}, 'SH', false);

//Updating the flood for the slope threshold
var flood_mask_VH_slope = flood_mask_VH.updateMask(slopemask);
var flood_mask_VV_slope = flood_mask_VV.updateMask(slopemask);

//Updating the flood for the elevation threshold 
var flood_mask_VH_high = flood_mask_VH.updateMask(highmask);
var flood_mask_VV_high = flood_mask_VV.updateMask(highmask);

//Updating the flood for the elevation and slope threshold 
var flood_mask_VH_sh = flood_mask_VH.updateMask(slopa);
var flood_mask_VV_sh = flood_mask_VV.updateMask(slopa);

//Updating the ndwi flood for the elevation and slope threshold
var classNDWI_slope = classNDWI.updateMask(slopemask);
var classNDWI_high = classNDWI.updateMask(highmask);
var classNDWI_sh = classNDWI.updateMask(slopa);

// we add maps for: , flood mask with slope, 
// flood mask with elevation,  flood mask with slope and elevation

//1. flood mask without slope and elevation
Map.addLayer(flood_mask_VH,{palette:['Red']}, 'Flood_Inudation VH');
Map.addLayer(flood_mask_VV,{palette:['Red']}, 'Flood_Inudation VV');

//2. flood mask with slope
Map.addLayer(flood_mask_VH_slope,{palette:['Red']}, 'Flood_Inudation with slope VH', false);
Map.addLayer(flood_mask_VV_slope,{palette:['Red']}, 'Flood_Inudation with slope VV', false);

//3. flood mask with elevation
Map.addLayer(flood_mask_VH_high,{palette:['Red']}, 'Flood_Inudation with elevation VH', false);
Map.addLayer(flood_mask_VV_high,{palette:['Red']}, 'Flood_Inudation with elevation VV', false);

//4. flood mask with elevation and slope included
Map.addLayer(flood_mask_VH_sh,{palette:['Red']}, 'Flood_Inudation with e and s VH', false);
Map.addLayer(flood_mask_VV_sh,{palette:['Red']}, 'Flood_Inudation with e and s VV', false);

//5. ndwi flood mask slope
Map.addLayer(classNDWI_slope,{palette:['Green']}, 'NDWI flood slope', false);

//6. ndwi flood mask elevation 
Map.addLayer(classNDWI_high,{palette:['Green']}, 'NDWI flood ele', false);

//7. ndwi flood mask sh
Map.addLayer(classNDWI_sh,{palette:['Green']}, 'NDWI flood sh', false);

///////////////////////////////////////////////////
// 7 land cover data used in chapter 2 of thesis //
//////////////////////////////////////////////////
//var LandCover = ee.ImageCollection("COPERNICUS/Landcover/100m/Proba-V-C3/Global");
// var lc_sunn = LandCover
// .filter(ee.Filter.date('2015-01-28', '2016-09-01'))
// .filterBounds(g3);

// var lc_sunn1 = lc_layyah.first().clip(g3);
// var paletteLC = {
//   bands: ['discrete_classification'],
// };
// Map.addLayer(lc_sunn1, paletteLC, 'Land Cover' );

////////////////////////////
///8_ Inundated Areas Stats ///
////////////////////////////

// code that prints total area of the flooded area
var stats_VH = flood_mask_VH.multiply(ee.Image.pixelArea()).reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: g3,
  scale: 10,
  crs: 'EPSG:32632',
  maxPixels: 1e13,
  tileScale: 16
});

//print(stats_VH);
var flood_area_VH = ee.Number(stats_VH.get('sum')).divide(1000000); //vh and vv bands are 10x10m pixel res
print('Flooded Area VH (KM2)', flood_area_VH);

var stats_VV = flood_mask_VV.multiply(ee.Image.pixelArea()).reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: g3,
  scale: 10,
  crs: 'EPSG:32632',
  maxPixels: 1e13,
  tileScale: 16
});

//print(stats_VV);
var flood_area_VV = ee.Number(stats_VV.get('sum')).divide(1000000); 
print('Flooded Area VV (KM2)', flood_area_VV);


// code that prints total area of the flooded area, including slope/elevation mask
var stats_VH_sh = flood_mask_VH_sh.multiply(ee.Image.pixelArea()).reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: g3,
  scale: 10,
  crs: 'EPSG:32632',
  maxPixels: 1e13,
  tileScale: 16
});

//print(stats_VH_sh);
var flood_area_VH_sh = ee.Number(stats_VH_sh.get('sum')).divide(1000000); 
print('Flooded Area VH SH (KM2)', flood_area_VH_sh);

var stats_VV_sh = flood_mask_VV_sh.multiply(ee.Image.pixelArea()).reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: g3,
  scale: 10,
  crs: 'EPSG:32632',
  maxPixels: 1e13,
  tileScale: 16
});

//print(stats_VV_sh);
var flood_area_VV_sh = ee.Number(stats_VV_sh.get('sum')).divide(1000000); 
print('Flooded Area SH VV (KM2)', flood_area_VV_sh);

var stats_ndwi = classNDWI.multiply(ee.Image.pixelArea()).reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: g3,
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1e13,
  tileScale: 16
});

//print(stats_ndwi);
var flood_area_ndwi = ee.Number(stats_ndwi.get('sum')).divide(1000000); //b8 and b3 pixels are 10x10m pixel res
print('Flooded Area NDWI (KM2)', flood_area_ndwi);

var stats_ndwi_sh = classNDWI_sh.multiply(ee.Image.pixelArea()).reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: g3,
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1e13,
  tileScale: 16
});

//print(stats_ndwi_sh);
var flood_area_ndwi_sh = ee.Number(stats_ndwi_sh.get('sum')).divide(1000000); //b8 and b3 pixels are 10x10m pixel res
print('Flooded Area NDWI SH (KM2)', flood_area_ndwi_sh);

////////////////////////////////////
/////9. Intersection of S1 and S2 imagery and
/////  calculated area of intersect //////
//////////////////////////////////////////

// find intersection between s1 vv and s2, we use the masks that include SEM
var floodIntersection1 = flood_mask_VV_sh.and(flood_maskNDWI);
var floodIntersection2 = flood_mask_VH_sh.and(flood_maskNDWI);
var floodIntersection3 = flood_mask_VH_sh.and(flood_mask_VV_sh);
Map.addLayer(floodIntersection1,{ palette: ['magenta']},"intersect of vv and ndwi");
Map.addLayer(floodIntersection2,{ palette: ['cyan']},"intersect of vh and ndwi");
Map.addLayer(floodIntersection3,{ palette: ['salmon']},"intersect of vh and vv");

var interesectionarea1 = floodIntersection1.multiply(ee.Image.pixelArea()).reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: g3,
  scale: 10,
  crs: 'EPSG:4326',
  tileScale: 16,
  maxPixels: 1e13
});
//.get('constant');

var flood_area_interesectionarea1 = ee.Number(interesectionarea1.get('sum')).divide(1000000); 
print('Flooded Area intersection vv ndwi (KM2)', flood_area_interesectionarea1);

var interesectionarea2 = floodIntersection2.multiply(ee.Image.pixelArea()).reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: g3,
  scale: 10,
  crs: 'EPSG:4326',
  tileScale: 16,
  maxPixels: 1e13
});
//.get('constant');

var flood_area_interesectionarea2 = ee.Number(interesectionarea2.get('sum')).divide(1000000); 
print('Flooded Area intersection vh ndwi (KM2)', flood_area_interesectionarea2);

var interesectionarea3 = floodIntersection3.multiply(ee.Image.pixelArea()).reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: g3,
  scale: 30,
  crs: 'EPSG:4326',
  tileScale: 16,
  maxPixels: 1e13
});


var flood_area_interesectionarea3 = ee.Number(interesectionarea3.get('sum')).divide(1000000); 
print('Flooded Area intersection vh and vv (KM2)', flood_area_interesectionarea3);


//////////////////////////////////////////////////////
//find correct projections used when exporting imagery 
////////////////////////////////////////////////////

var proj1 = optical_after.select(1).projection();
print(proj1,'proj1');

var proja = 'EPSG:4326';

var proj2 = before.first().select(0).projection();
print(proj2,'proj2');

